/*
Author:			This code was generated by DALGen version 1.1.0.0 available at https://github.com/H0r53/DALGen 
Date:			1/3/2018
Description:	Creates the watchlist table and respective stored procedures

*/


USE topcryptopicks;



-- ------------------------------------------------------------
-- Drop existing objects
-- ------------------------------------------------------------

DROP TABLE IF EXISTS `topcryptopicks`.`watchlist`;
DROP PROCEDURE IF EXISTS `topcryptopicks`.`usp_watchlist_Load`;
DROP PROCEDURE IF EXISTS `topcryptopicks`.`usp_watchlist_LoadAll`;
DROP PROCEDURE IF EXISTS `topcryptopicks`.`usp_watchlist_Add`;
DROP PROCEDURE IF EXISTS `topcryptopicks`.`usp_watchlist_Update`;
DROP PROCEDURE IF EXISTS `topcryptopicks`.`usp_watchlist_Delete`;
DROP PROCEDURE IF EXISTS `topcryptopicks`.`usp_watchlist_Search`;


-- ------------------------------------------------------------
-- Create table
-- ------------------------------------------------------------



CREATE TABLE `topcryptopicks`.`watchlist` (
Id INT AUTO_INCREMENT,
CustomerId INT,
CONSTRAINT pk_watchlist_Id PRIMARY KEY (Id),
CONSTRAINT fk_watchlist_CustomerId_customer_Id FOREIGN KEY (CustomerId) REFERENCES customer (Id)
);


-- ------------------------------------------------------------
-- Create default SCRUD sprocs for this table
-- ------------------------------------------------------------


DELIMITER //
CREATE PROCEDURE `topcryptopicks`.`usp_watchlist_Load`
(
	 IN paramId INT
)
BEGIN
	SELECT
		`watchlist`.`Id` AS `Id`,
		`watchlist`.`CustomerId` AS `CustomerId`
	FROM `watchlist`
	WHERE 		`watchlist`.`Id` = paramId;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `topcryptopicks`.`usp_watchlist_LoadAll`
()
BEGIN
	SELECT
		`watchlist`.`Id` AS `Id`,
		`watchlist`.`CustomerId` AS `CustomerId`
	FROM `watchlist`;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `topcryptopicks`.`usp_watchlist_Add`
(
	 IN paramCustomerId INT
)
BEGIN
	INSERT INTO `watchlist` (CustomerId)
	VALUES (paramCustomerId);
	-- Return last inserted ID as result
	SELECT LAST_INSERT_ID() as id;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `topcryptopicks`.`usp_watchlist_Update`
(
	IN paramId INT,
	IN paramCustomerId INT
)
BEGIN
	UPDATE `watchlist`
	SET CustomerId = paramCustomerId
	WHERE		`watchlist`.`Id` = paramId;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `topcryptopicks`.`usp_watchlist_Delete`
(
	IN paramId INT
)
BEGIN
	DELETE FROM `watchlist`
	WHERE		`watchlist`.`Id` = paramId;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `topcryptopicks`.`usp_watchlist_Search`
(
	IN paramId INT,
	IN paramCustomerId INT
)
BEGIN
	SELECT
		`watchlist`.`Id` AS `Id`,
		`watchlist`.`CustomerId` AS `CustomerId`
	FROM `watchlist`
	WHERE
		COALESCE(watchlist.`Id`,0) = COALESCE(paramId,watchlist.`Id`,0)
		AND COALESCE(watchlist.`CustomerId`,0) = COALESCE(paramCustomerId,watchlist.`CustomerId`,0);
END //
DELIMITER ;


