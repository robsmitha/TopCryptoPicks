/*
Author:			This code was generated by DALGen version 1.1.0.0 available at https://github.com/H0r53/DALGen 
Date:			12/9/2017
Description:	Creates the cartitem table and respective stored procedures

*/


USE topcryptopicks;



-- ------------------------------------------------------------
-- Drop existing objects
-- ------------------------------------------------------------

DROP TABLE IF EXISTS `topcryptopicks`.`cartitem`;
DROP PROCEDURE IF EXISTS `topcryptopicks`.`usp_cartitem_Load`;
DROP PROCEDURE IF EXISTS `topcryptopicks`.`usp_cartitem_LoadAll`;
DROP PROCEDURE IF EXISTS `topcryptopicks`.`usp_cartitem_Add`;
DROP PROCEDURE IF EXISTS `topcryptopicks`.`usp_cartitem_Update`;
DROP PROCEDURE IF EXISTS `topcryptopicks`.`usp_cartitem_Delete`;
DROP PROCEDURE IF EXISTS `topcryptopicks`.`usp_cartitem_Search`;


-- ------------------------------------------------------------
-- Create table
-- ------------------------------------------------------------



CREATE TABLE `topcryptopicks`.`cartitem` (
Id INT AUTO_INCREMENT,
cartId INT,
SubscriptionId INT,
AddDate DATETIME,
Quantity INT,
SubscriptionStartDate DATE,
SubscriptionEndDate DATE,
CONSTRAINT pk_cartitem_Id PRIMARY KEY (Id),
CONSTRAINT fk_cartitem_cartId_cart_Id FOREIGN KEY (cartId) REFERENCES cart (Id),
CONSTRAINT fk_cartitem_SubscriptionId_subscription_Id FOREIGN KEY (SubscriptionId) REFERENCES subscription (Id)
);


-- ------------------------------------------------------------
-- Create default SCRUD sprocs for this table
-- ------------------------------------------------------------


DELIMITER //
CREATE PROCEDURE `topcryptopicks`.`usp_cartitem_Load`
(
	 IN paramId INT
)
BEGIN
	SELECT
		`cartitem`.`Id` AS `Id`,
		`cartitem`.`cartId` AS `cartId`,
		`cartitem`.`SubscriptionId` AS `SubscriptionId`,
		`cartitem`.`AddDate` AS `AddDate`,
		`cartitem`.`Quantity` AS `Quantity`,
		`cartitem`.`SubscriptionStartDate` AS `SubscriptionStartDate`,
		`cartitem`.`SubscriptionEndDate` AS `SubscriptionEndDate`
	FROM `cartitem`
	WHERE 		`cartitem`.`Id` = paramId;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `topcryptopicks`.`usp_cartitem_LoadAll`
()
BEGIN
	SELECT
		`cartitem`.`Id` AS `Id`,
		`cartitem`.`cartId` AS `cartId`,
		`cartitem`.`SubscriptionId` AS `SubscriptionId`,
		`cartitem`.`AddDate` AS `AddDate`,
		`cartitem`.`Quantity` AS `Quantity`,
		`cartitem`.`SubscriptionStartDate` AS `SubscriptionStartDate`,
		`cartitem`.`SubscriptionEndDate` AS `SubscriptionEndDate`
	FROM `cartitem`;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `topcryptopicks`.`usp_cartitem_Add`
(
	 IN paramcartId INT,
	 IN paramSubscriptionId INT,
	 IN paramAddDate DATETIME,
	 IN paramQuantity INT,
	 IN paramSubscriptionStartDate DATE,
	 IN paramSubscriptionEndDate DATE
)
BEGIN
	INSERT INTO `cartitem` (cartId,SubscriptionId,AddDate,Quantity,SubscriptionStartDate,SubscriptionEndDate)
	VALUES (paramcartId, paramSubscriptionId, paramAddDate, paramQuantity, paramSubscriptionStartDate, paramSubscriptionEndDate);
	-- Return last inserted ID as result
	SELECT LAST_INSERT_ID() as id;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `topcryptopicks`.`usp_cartitem_Update`
(
	IN paramId INT,
	IN paramcartId INT,
	IN paramSubscriptionId INT,
	IN paramAddDate DATETIME,
	IN paramQuantity INT,
	IN paramSubscriptionStartDate DATE,
	IN paramSubscriptionEndDate DATE
)
BEGIN
	UPDATE `cartitem`
	SET cartId = paramcartId
		,SubscriptionId = paramSubscriptionId
		,AddDate = paramAddDate
		,Quantity = paramQuantity
		,SubscriptionStartDate = paramSubscriptionStartDate
		,SubscriptionEndDate = paramSubscriptionEndDate
	WHERE		`cartitem`.`Id` = paramId;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `topcryptopicks`.`usp_cartitem_Delete`
(
	IN paramId INT
)
BEGIN
	DELETE FROM `cartitem`
	WHERE		`cartitem`.`Id` = paramId;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `topcryptopicks`.`usp_cartitem_Search`
(
	IN paramId INT,
	IN paramcartId INT,
	IN paramSubscriptionId INT,
	IN paramAddDate DATETIME,
	IN paramQuantity INT,
	IN paramSubscriptionStartDate DATE,
	IN paramSubscriptionEndDate DATE
)
BEGIN
	SELECT
		`cartitem`.`Id` AS `Id`,
		`cartitem`.`cartId` AS `cartId`,
		`cartitem`.`SubscriptionId` AS `SubscriptionId`,
		`cartitem`.`AddDate` AS `AddDate`,
		`cartitem`.`Quantity` AS `Quantity`,
		`cartitem`.`SubscriptionStartDate` AS `SubscriptionStartDate`,
		`cartitem`.`SubscriptionEndDate` AS `SubscriptionEndDate`
	FROM `cartitem`
	WHERE
		COALESCE(cartitem.`Id`,0) = COALESCE(paramId,cartitem.`Id`,0)
		AND COALESCE(cartitem.`cartId`,0) = COALESCE(paramcartId,cartitem.`cartId`,0)
		AND COALESCE(cartitem.`SubscriptionId`,0) = COALESCE(paramSubscriptionId,cartitem.`SubscriptionId`,0)
		AND COALESCE(CAST(cartitem.`AddDate` AS DATE), CAST(NOW() AS DATE)) = COALESCE(CAST(paramAddDate AS DATE),CAST(cartitem.`AddDate` AS DATE), CAST(NOW() AS DATE))
		AND COALESCE(cartitem.`Quantity`,0) = COALESCE(paramQuantity,cartitem.`Quantity`,0)
		AND COALESCE(cartitem.`SubscriptionStartDate`,'') = COALESCE(paramSubscriptionStartDate,cartitem.`SubscriptionStartDate`,'')
		AND COALESCE(cartitem.`SubscriptionEndDate`,'') = COALESCE(paramSubscriptionEndDate,cartitem.`SubscriptionEndDate`,'');
END //
DELIMITER ;


