/*
Author:			This code was generated by DALGen version 1.1.0.0 available at https://github.com/H0r53/DALGen 
Date:			12/9/2017
Description:	Creates the termtype table and respective stored procedures

*/


USE topcryptopicks;



-- ------------------------------------------------------------
-- Drop existing objects
-- ------------------------------------------------------------

DROP TABLE IF EXISTS `topcryptopicks`.`termtype`;
DROP PROCEDURE IF EXISTS `topcryptopicks`.`usp_termtype_Load`;
DROP PROCEDURE IF EXISTS `topcryptopicks`.`usp_termtype_LoadAll`;
DROP PROCEDURE IF EXISTS `topcryptopicks`.`usp_termtype_Add`;
DROP PROCEDURE IF EXISTS `topcryptopicks`.`usp_termtype_Update`;
DROP PROCEDURE IF EXISTS `topcryptopicks`.`usp_termtype_Delete`;
DROP PROCEDURE IF EXISTS `topcryptopicks`.`usp_termtype_Search`;


-- ------------------------------------------------------------
-- Create table
-- ------------------------------------------------------------



CREATE TABLE `topcryptopicks`.`termtype` (
Id INT AUTO_INCREMENT,
TotalDays INT,
Name VARCHAR(255),
Description VARCHAR(1025),
CONSTRAINT pk_termtype_Id PRIMARY KEY (Id)
);


-- ------------------------------------------------------------
-- Create default SCRUD sprocs for this table
-- ------------------------------------------------------------


DELIMITER //
CREATE PROCEDURE `topcryptopicks`.`usp_termtype_Load`
(
	 IN paramId INT
)
BEGIN
	SELECT
		`termtype`.`Id` AS `Id`,
		`termtype`.`TotalDays` AS `TotalDays`,
		`termtype`.`Name` AS `Name`,
		`termtype`.`Description` AS `Description`
	FROM `termtype`
	WHERE 		`termtype`.`Id` = paramId;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `topcryptopicks`.`usp_termtype_LoadAll`
()
BEGIN
	SELECT
		`termtype`.`Id` AS `Id`,
		`termtype`.`TotalDays` AS `TotalDays`,
		`termtype`.`Name` AS `Name`,
		`termtype`.`Description` AS `Description`
	FROM `termtype`;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `topcryptopicks`.`usp_termtype_Add`
(
	 IN paramTotalDays INT,
	 IN paramName VARCHAR(255),
	 IN paramDescription VARCHAR(1025)
)
BEGIN
	INSERT INTO `termtype` (TotalDays,Name,Description)
	VALUES (paramTotalDays, paramName, paramDescription);
	-- Return last inserted ID as result
	SELECT LAST_INSERT_ID() as id;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `topcryptopicks`.`usp_termtype_Update`
(
	IN paramId INT,
	IN paramTotalDays INT,
	IN paramName VARCHAR(255),
	IN paramDescription VARCHAR(1025)
)
BEGIN
	UPDATE `termtype`
	SET TotalDays = paramTotalDays
		,Name = paramName
		,Description = paramDescription
	WHERE		`termtype`.`Id` = paramId;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `topcryptopicks`.`usp_termtype_Delete`
(
	IN paramId INT
)
BEGIN
	DELETE FROM `termtype`
	WHERE		`termtype`.`Id` = paramId;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `topcryptopicks`.`usp_termtype_Search`
(
	IN paramId INT,
	IN paramTotalDays INT,
	IN paramName VARCHAR(255),
	IN paramDescription VARCHAR(1025)
)
BEGIN
	SELECT
		`termtype`.`Id` AS `Id`,
		`termtype`.`TotalDays` AS `TotalDays`,
		`termtype`.`Name` AS `Name`,
		`termtype`.`Description` AS `Description`
	FROM `termtype`
	WHERE
		COALESCE(termtype.`Id`,0) = COALESCE(paramId,termtype.`Id`,0)
		AND COALESCE(termtype.`TotalDays`,0) = COALESCE(paramTotalDays,termtype.`TotalDays`,0)
		AND COALESCE(termtype.`Name`,'') = COALESCE(paramName,termtype.`Name`,'')
		AND COALESCE(termtype.`Description`,'') = COALESCE(paramDescription,termtype.`Description`,'');
END //
DELIMITER ;


