/*
Author:			This code was generated by DALGen version 1.1.0.0 available at https://github.com/H0r53/DALGen 
Date:			12/9/2017
Description:	Creates the subscription table and respective stored procedures

*/


USE topcryptopicks;



-- ------------------------------------------------------------
-- Drop existing objects
-- ------------------------------------------------------------

DROP TABLE IF EXISTS `topcryptopicks`.`subscription`;
DROP PROCEDURE IF EXISTS `topcryptopicks`.`usp_subscription_Load`;
DROP PROCEDURE IF EXISTS `topcryptopicks`.`usp_subscription_LoadAll`;
DROP PROCEDURE IF EXISTS `topcryptopicks`.`usp_subscription_Add`;
DROP PROCEDURE IF EXISTS `topcryptopicks`.`usp_subscription_Update`;
DROP PROCEDURE IF EXISTS `topcryptopicks`.`usp_subscription_Delete`;
DROP PROCEDURE IF EXISTS `topcryptopicks`.`usp_subscription_Search`;


-- ------------------------------------------------------------
-- Create table
-- ------------------------------------------------------------



CREATE TABLE `topcryptopicks`.`subscription` (
Id INT AUTO_INCREMENT,
Name VARCHAR(255),
Description VARCHAR(1025),
TermTypeID INT,
Price DECIMAL(9),
ImgUrl VARCHAR(1025),
CreateDate DATETIME,
StatusTypeId INT,
CONSTRAINT pk_subscription_Id PRIMARY KEY (Id),
CONSTRAINT fk_subscription_TermTypeID_termtype_Id FOREIGN KEY (TermTypeID) REFERENCES termtype (Id),
CONSTRAINT fk_subscription_StatusTypeId_statustype_Id FOREIGN KEY (StatusTypeId) REFERENCES statustype (Id)
);


-- ------------------------------------------------------------
-- Create default SCRUD sprocs for this table
-- ------------------------------------------------------------


DELIMITER //
CREATE PROCEDURE `topcryptopicks`.`usp_subscription_Load`
(
	 IN paramId INT
)
BEGIN
	SELECT
		`subscription`.`Id` AS `Id`,
		`subscription`.`Name` AS `Name`,
		`subscription`.`Description` AS `Description`,
		`subscription`.`TermTypeID` AS `TermTypeID`,
		`subscription`.`Price` AS `Price`,
		`subscription`.`ImgUrl` AS `ImgUrl`,
		`subscription`.`CreateDate` AS `CreateDate`,
		`subscription`.`StatusTypeId` AS `StatusTypeId`
	FROM `subscription`
	WHERE 		`subscription`.`Id` = paramId;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `topcryptopicks`.`usp_subscription_LoadAll`
()
BEGIN
	SELECT
		`subscription`.`Id` AS `Id`,
		`subscription`.`Name` AS `Name`,
		`subscription`.`Description` AS `Description`,
		`subscription`.`TermTypeID` AS `TermTypeID`,
		`subscription`.`Price` AS `Price`,
		`subscription`.`ImgUrl` AS `ImgUrl`,
		`subscription`.`CreateDate` AS `CreateDate`,
		`subscription`.`StatusTypeId` AS `StatusTypeId`
	FROM `subscription`;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `topcryptopicks`.`usp_subscription_Add`
(
	 IN paramName VARCHAR(255),
	 IN paramDescription VARCHAR(1025),
	 IN paramTermTypeID INT,
	 IN paramPrice DECIMAL(9),
	 IN paramImgUrl VARCHAR(1025),
	 IN paramCreateDate DATETIME,
	 IN paramStatusTypeId INT
)
BEGIN
	INSERT INTO `subscription` (Name,Description,TermTypeID,Price,ImgUrl,CreateDate,StatusTypeId)
	VALUES (paramName, paramDescription, paramTermTypeID, paramPrice, paramImgUrl, paramCreateDate, paramStatusTypeId);
	-- Return last inserted ID as result
	SELECT LAST_INSERT_ID() as id;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `topcryptopicks`.`usp_subscription_Update`
(
	IN paramId INT,
	IN paramName VARCHAR(255),
	IN paramDescription VARCHAR(1025),
	IN paramTermTypeID INT,
	IN paramPrice DECIMAL(9),
	IN paramImgUrl VARCHAR(1025),
	IN paramCreateDate DATETIME,
	IN paramStatusTypeId INT
)
BEGIN
	UPDATE `subscription`
	SET Name = paramName
		,Description = paramDescription
		,TermTypeID = paramTermTypeID
		,Price = paramPrice
		,ImgUrl = paramImgUrl
		,CreateDate = paramCreateDate
		,StatusTypeId = paramStatusTypeId
	WHERE		`subscription`.`Id` = paramId;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `topcryptopicks`.`usp_subscription_Delete`
(
	IN paramId INT
)
BEGIN
	DELETE FROM `subscription`
	WHERE		`subscription`.`Id` = paramId;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `topcryptopicks`.`usp_subscription_Search`
(
	IN paramId INT,
	IN paramName VARCHAR(255),
	IN paramDescription VARCHAR(1025),
	IN paramTermTypeID INT,
	IN paramPrice DECIMAL(9),
	IN paramImgUrl VARCHAR(1025),
	IN paramCreateDate DATETIME,
	IN paramStatusTypeId INT
)
BEGIN
	SELECT
		`subscription`.`Id` AS `Id`,
		`subscription`.`Name` AS `Name`,
		`subscription`.`Description` AS `Description`,
		`subscription`.`TermTypeID` AS `TermTypeID`,
		`subscription`.`Price` AS `Price`,
		`subscription`.`ImgUrl` AS `ImgUrl`,
		`subscription`.`CreateDate` AS `CreateDate`,
		`subscription`.`StatusTypeId` AS `StatusTypeId`
	FROM `subscription`
	WHERE
		COALESCE(subscription.`Id`,0) = COALESCE(paramId,subscription.`Id`,0)
		AND COALESCE(subscription.`Name`,'') = COALESCE(paramName,subscription.`Name`,'')
		AND COALESCE(subscription.`Description`,'') = COALESCE(paramDescription,subscription.`Description`,'')
		AND COALESCE(subscription.`TermTypeID`,0) = COALESCE(paramTermTypeID,subscription.`TermTypeID`,0)
		AND COALESCE(subscription.`Price`,0) = COALESCE(paramPrice,subscription.`Price`,0)
		AND COALESCE(subscription.`ImgUrl`,'') = COALESCE(paramImgUrl,subscription.`ImgUrl`,'')
		AND COALESCE(CAST(subscription.`CreateDate` AS DATE), CAST(NOW() AS DATE)) = COALESCE(CAST(paramCreateDate AS DATE),CAST(subscription.`CreateDate` AS DATE), CAST(NOW() AS DATE))
		AND COALESCE(subscription.`StatusTypeId`,0) = COALESCE(paramStatusTypeId,subscription.`StatusTypeId`,0);
END //
DELIMITER ;


