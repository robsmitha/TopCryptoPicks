<?php
/*
Author:			This code was generated by DALGen version 1.1.0.0 available at https://github.com/H0r53/DALGen 
Date:			1/3/2018
Description:	Creates the DAL class for  watchlistitem table and respective stored procedures

*/



class Watchlistitem {

	// This is for local purposes only! In hosted environments the db_settings.php file should be outside of the webroot, such as: include("/outside-webroot/db_settings.php");
	protected static function getDbSettings() { return "DAL/db_localsettings.php"; }

	/******************************************************************/
	// Properties
	/******************************************************************/

	protected $Id;
	protected $Name;
	protected $Symbol;
	protected $WatchlistId;
	protected $AddDate;


	/******************************************************************/
	// Constructors
	/******************************************************************/
	public function __construct() {
		$argv = func_get_args();
		switch( func_num_args() ) {
			case 0:
				self::__constructBase();
				break;
			case 1:
				self::__constructPK( $argv[0] );
				break;
			case 5:
				self::__constructFull( $argv[0], $argv[1], $argv[2], $argv[3], $argv[4] );
		}
	}


	public function __constructBase() {
		$this->Id = 0;
		$this->Name = "";
		$this->Symbol = "";
		$this->WatchlistId = 0;
		$this->AddDate = "";
	}


	public function __constructPK($paramId) {
		$this->load($paramId);
	}


	public function __constructFull($paramId,$paramName,$paramSymbol,$paramWatchlistId,$paramAddDate) {
		$this->Id = $paramId;
		$this->Name = $paramName;
		$this->Symbol = $paramSymbol;
		$this->WatchlistId = $paramWatchlistId;
		$this->AddDate = $paramAddDate;
	}


	/******************************************************************/
	// Accessors / Mutators
	/******************************************************************/

	public function getId(){
		return $this->Id;
	}
	public function setId($value){
		$this->Id = $value;
	}
	public function getName(){
		return $this->Name;
	}
	public function setName($value){
		$this->Name = $value;
	}
	public function getSymbol(){
		return $this->Symbol;
	}
	public function setSymbol($value){
		$this->Symbol = $value;
	}
	public function getWatchlistId(){
		return $this->WatchlistId;
	}
	public function setWatchlistId($value){
		$this->WatchlistId = $value;
	}
	public function getAddDate(){
		return $this->AddDate;
	}
	public function setAddDate($value){
		$this->AddDate = $value;
	}


	/******************************************************************/
	// Public Methods
	/******************************************************************/


	public function load($paramId) {
		include(self::getDbSettings());
		$conn = new mysqli($servername, $username, $password, $dbname);
		$stmt = $conn->prepare('CALL usp_watchlistitem_Load(?)');
		$stmt->bind_param('i', $paramId);
		$stmt->execute();

		$result = $stmt->get_result();
		if (!$result) die($conn->error);

		while ($row = $result->fetch_assoc()) {
		 $this->setId($row['Id']);
		 $this->setName($row['Name']);
		 $this->setSymbol($row['Symbol']);
		 $this->setWatchlistId($row['WatchlistId']);
		 $this->setAddDate($row['AddDate']);
		}
	}


	public function save() {
		if ($this->getId() == 0)
			$this->insert();
		else
			$this->update();
	}

	/******************************************************************/
	// Private Methods
	/******************************************************************/



	private function insert() {
		include(self::getDbSettings());
		$conn = new mysqli($servername, $username, $password, $dbname);
		$stmt = $conn->prepare('CALL usp_watchlistitem_Add(?,?,?,?)');
		$arg1 = $this->getName();
		$arg2 = $this->getSymbol();
		$arg3 = $this->getWatchlistId();
		$arg4 = $this->getAddDate();
		$stmt->bind_param('ssis',$arg1,$arg2,$arg3,$arg4);
		$stmt->execute();

		$result = $stmt->get_result();
		if (!$result) die($conn->error);
		while ($row = $result->fetch_assoc()) {
			// By default, the DALGen generated INSERT procedure returns the scope identity as id
			$this->load($row['id']);
		}
	}


	private function update() {
		include(self::getDbSettings());
		$conn = new mysqli($servername, $username, $password, $dbname);
		$stmt = $conn->prepare('CALL usp_watchlistitem_Update(?,?,?,?,?)');
		$arg1 = $this->getId();
		$arg2 = $this->getName();
		$arg3 = $this->getSymbol();
		$arg4 = $this->getWatchlistId();
		$arg5 = $this->getAddDate();
		$stmt->bind_param('issis',$arg1,$arg2,$arg3,$arg4,$arg5);
		$stmt->execute();
	}

	private static function setNullValue($value){
		if ($value == "")
			return null;
		else
			return $value;
	}

	/******************************************************************/
	// Static Methods
	/******************************************************************/



	public static function loadall() {
		include(self::getDbSettings());
		$conn = new mysqli($servername, $username, $password, $dbname);
		$stmt = $conn->prepare('CALL usp_watchlistitem_LoadAll()');
		$stmt->execute();

		$result = $stmt->get_result();
		if (!$result) die($conn->error);
		if ($result->num_rows > 0) {
			$arr = array();
			while ($row = $result->fetch_assoc()) {
				$watchlistitem = new Watchlistitem($row['Id'],$row['Name'],$row['Symbol'],$row['WatchlistId'],$row['AddDate']);
				$arr[] = $watchlistitem;
			}
			return $arr;
		}
		else {
			die("The query yielded zero results.No rows found.");
		}
	}


	public static function remove($paramId) {
		include(self::getDbSettings());
		$conn = new mysqli($servername, $username, $password, $dbname);
		$stmt = $conn->prepare('CALL usp_watchlistitem_Delete(?)');
		$stmt->bind_param('i', $paramId);
		$stmt->execute();
	}


	public static function search($paramId,$paramName,$paramSymbol,$paramWatchlistId,$paramAddDate) {
		include(self::getDbSettings());
		$conn = new mysqli($servername, $username, $password, $dbname);
		$stmt = $conn->prepare('CALL usp_watchlistitem_Search(?,?,?,?,?)');
		$arg1 = Watchlistitem::setNullValue($paramId);
		$arg2 = Watchlistitem::setNullValue($paramName);
		$arg3 = Watchlistitem::setNullValue($paramSymbol);
		$arg4 = Watchlistitem::setNullValue($paramWatchlistId);
		$arg5 = Watchlistitem::setNullValue($paramAddDate);
		$stmt->bind_param('issis',$arg1,$arg2,$arg3,$arg4,$arg5);
		$stmt->execute();

		$result = $stmt->get_result();
		if (!$result) die($conn->error);
		if ($result->num_rows > 0) {
			$arr = array();
			while ($row = $result->fetch_assoc()) {
				$watchlistitem = new Watchlistitem($row['Id'],$row['Name'],$row['Symbol'],$row['WatchlistId'],$row['AddDate']);
				$arr[] = $watchlistitem;
			}
			return $arr;
		}
		else {
			die("The query yielded zero results.No rows found.");
		}
	}
    public static function loadbywatchlistid($paramWatchlistId) {
        include(self::getDbSettings());
        $conn = new mysqli($servername, $username, $password, $dbname);
        $stmt = $conn->prepare('CALL usp_watchlistitem_LoadByWatchlistId(?)');
        $stmt->bind_param('i', $paramWatchlistId);
        $stmt->execute();
        $result = $stmt->get_result();
        if (!$result) die($conn->error);
        if ($result->num_rows > 0) {
            $arr = array();
            while ($row = $result->fetch_assoc()) {
                $watchlistitem = new Watchlistitem($row['Id'],$row['Name'],$row['Symbol'],$row['WatchlistId'],$row['AddDate']);
                $arr[] = $watchlistitem;
            }
            return $arr;
        }
        else {
            //die("The query yielded zero results.No rows found.");
        }
    }
}
