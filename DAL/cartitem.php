<?php
/*
Author:			This code was generated by DALGen version 1.1.0.0 available at https://github.com/H0r53/DALGen 
Date:			12/9/2017
Description:	Creates the DAL class for  cartitem table and respective stored procedures

*/



class Cartitem {

	// This is for local purposes only! In hosted environments the db_settings.php file should be outside of the webroot, such as: include("/outside-webroot/db_settings.php");
	protected static function getDbSettings() { return "DAL/db_localsettings.php"; }

	/******************************************************************/
	// Properties
	/******************************************************************/

	protected $Id;
	protected $cartId;
	protected $SubscriptionId;
	protected $AddDate;
	protected $Quantity;
	protected $SubscriptionStartDate;
	protected $SubscriptionEndDate;


	/******************************************************************/
	// Constructors
	/******************************************************************/
	public function __construct() {
		$argv = func_get_args();
		switch( func_num_args() ) {
			case 0:
				self::__constructBase();
				break;
			case 1:
				self::__constructPK( $argv[0] );
				break;
			case 7:
				self::__constructFull( $argv[0], $argv[1], $argv[2], $argv[3], $argv[4], $argv[5], $argv[6] );
		}
	}


	public function __constructBase() {
		$this->Id = 0;
		$this->cartId = 0;
		$this->SubscriptionId = 0;
		$this->AddDate = "";
		$this->Quantity = 0;
		$this->SubscriptionStartDate = "";
		$this->SubscriptionEndDate = "";
	}


	public function __constructPK($paramId) {
		$this->load($paramId);
	}


	public function __constructFull($paramId,$paramcartId,$paramSubscriptionId,$paramAddDate,$paramQuantity,$paramSubscriptionStartDate,$paramSubscriptionEndDate) {
		$this->Id = $paramId;
		$this->cartId = $paramcartId;
		$this->SubscriptionId = $paramSubscriptionId;
		$this->AddDate = $paramAddDate;
		$this->Quantity = $paramQuantity;
		$this->SubscriptionStartDate = $paramSubscriptionStartDate;
		$this->SubscriptionEndDate = $paramSubscriptionEndDate;
	}


	/******************************************************************/
	// Accessors / Mutators
	/******************************************************************/

	public function getId(){
		return $this->Id;
	}
	public function setId($value){
		$this->Id = $value;
	}
	public function getcartId(){
		return $this->cartId;
	}
	public function setcartId($value){
		$this->cartId = $value;
	}
	public function getSubscriptionId(){
		return $this->SubscriptionId;
	}
	public function setSubscriptionId($value){
		$this->SubscriptionId = $value;
	}
	public function getAddDate(){
		return $this->AddDate;
	}
	public function setAddDate($value){
		$this->AddDate = $value;
	}
	public function getQuantity(){
		return $this->Quantity;
	}
	public function setQuantity($value){
		$this->Quantity = $value;
	}
	public function getSubscriptionStartDate(){
		return $this->SubscriptionStartDate;
	}
	public function setSubscriptionStartDate($value){
		$this->SubscriptionStartDate = $value;
	}
	public function getSubscriptionEndDate(){
		return $this->SubscriptionEndDate;
	}
	public function setSubscriptionEndDate($value){
		$this->SubscriptionEndDate = $value;
	}


	/******************************************************************/
	// Public Methods
	/******************************************************************/


	public function load($paramId) {
		include(self::getDbSettings());
		$conn = new mysqli($servername, $username, $password, $dbname);
		$stmt = $conn->prepare('CALL usp_cartitem_Load(?)');
		$stmt->bind_param('i', $paramId);
		$stmt->execute();

		$result = $stmt->get_result();
		if (!$result) die($conn->error);

		while ($row = $result->fetch_assoc()) {
		 $this->setId($row['Id']);
		 $this->setcartId($row['cartId']);
		 $this->setSubscriptionId($row['SubscriptionId']);
		 $this->setAddDate($row['AddDate']);
		 $this->setQuantity($row['Quantity']);
		 $this->setSubscriptionStartDate($row['SubscriptionStartDate']);
		 $this->setSubscriptionEndDate($row['SubscriptionEndDate']);
		}
	}


	public function save() {
		if ($this->getId() == 0)
			$this->insert();
		else
			$this->update();
	}

	/******************************************************************/
	// Private Methods
	/******************************************************************/



	private function insert() {
		include(self::getDbSettings());
		$conn = new mysqli($servername, $username, $password, $dbname);
		$stmt = $conn->prepare('CALL usp_cartitem_Add(?,?,?,?,?,?)');
		$arg1 = $this->getcartId();
		$arg2 = $this->getSubscriptionId();
		$arg3 = $this->getAddDate();
		$arg4 = $this->getQuantity();
		$arg5 = $this->getSubscriptionStartDate();
		$arg6 = $this->getSubscriptionEndDate();
		$stmt->bind_param('iisiss',$arg1,$arg2,$arg3,$arg4,$arg5,$arg6);
		$stmt->execute();

		$result = $stmt->get_result();
		if (!$result) die($conn->error);
		while ($row = $result->fetch_assoc()) {
			// By default, the DALGen generated INSERT procedure returns the scope identity as id
			$this->load($row['id']);
		}
	}


	private function update() {
		include(self::getDbSettings());
		$conn = new mysqli($servername, $username, $password, $dbname);
		$stmt = $conn->prepare('CALL usp_cartitem_Update(?,?,?,?,?,?,?)');
		$arg1 = $this->getId();
		$arg2 = $this->getcartId();
		$arg3 = $this->getSubscriptionId();
		$arg4 = $this->getAddDate();
		$arg5 = $this->getQuantity();
		$arg6 = $this->getSubscriptionStartDate();
		$arg7 = $this->getSubscriptionEndDate();
		$stmt->bind_param('iiisiss',$arg1,$arg2,$arg3,$arg4,$arg5,$arg6,$arg7);
		$stmt->execute();
	}

	private static function setNullValue($value){
		if ($value == "")
			return null;
		else
			return $value;
	}

	/******************************************************************/
	// Static Methods
	/******************************************************************/



	public static function loadall() {
		include(self::getDbSettings());
		$conn = new mysqli($servername, $username, $password, $dbname);
		$stmt = $conn->prepare('CALL usp_cartitem_LoadAll()');
		$stmt->execute();

		$result = $stmt->get_result();
		if (!$result) die($conn->error);
		if ($result->num_rows > 0) {
			$arr = array();
			while ($row = $result->fetch_assoc()) {
				$cartitem = new Cartitem($row['Id'],$row['cartId'],$row['SubscriptionId'],$row['AddDate'],$row['Quantity'],$row['SubscriptionStartDate'],$row['SubscriptionEndDate']);
				$arr[] = $cartitem;
			}
			return $arr;
		}
		else {
			die("The query yielded zero results.No rows found.");
		}
	}


	public static function remove($paramId) {
		include(self::getDbSettings());
		$conn = new mysqli($servername, $username, $password, $dbname);
		$stmt = $conn->prepare('CALL usp_cartitem_Remove(?)');
		$stmt->bind_param('i', $paramId);
		$stmt->execute();
	}


	public static function search($paramId,$paramcartId,$paramSubscriptionId,$paramAddDate,$paramQuantity,$paramSubscriptionStartDate,$paramSubscriptionEndDate) {
		include(self::getDbSettings());
		$conn = new mysqli($servername, $username, $password, $dbname);
		$stmt = $conn->prepare('CALL usp_cartitem_Search(?,?,?,?,?,?,?)');
		$arg1 = Cartitem::setNullValue($paramId);
		$arg2 = Cartitem::setNullValue($paramcartId);
		$arg3 = Cartitem::setNullValue($paramSubscriptionId);
		$arg4 = Cartitem::setNullValue($paramAddDate);
		$arg5 = Cartitem::setNullValue($paramQuantity);
		$arg6 = Cartitem::setNullValue($paramSubscriptionStartDate);
		$arg7 = Cartitem::setNullValue($paramSubscriptionEndDate);
		$stmt->bind_param('iiisiss',$arg1,$arg2,$arg3,$arg4,$arg5,$arg6,$arg7);
		$stmt->execute();

		$result = $stmt->get_result();
		if (!$result) die($conn->error);
		if ($result->num_rows > 0) {
			$arr = array();
			while ($row = $result->fetch_assoc()) {
				$cartitem = new Cartitem($row['Id'],$row['cartId'],$row['SubscriptionId'],$row['AddDate'],$row['Quantity'],$row['SubscriptionStartDate'],$row['SubscriptionEndDate']);
				$arr[] = $cartitem;
			}
			return $arr;
		}
		else {
			die("The query yielded zero results.No rows found.");
		}
	}
    public static function loadbycartid($paramCartId) {
        include(self::getDbSettings());
        $conn = new mysqli($servername, $username, $password, $dbname);
        $stmt = $conn->prepare('CALL usp_cartitem_LoadByCartId(?)');
        $stmt->bind_param('i', $paramCartId);
        $stmt->execute();
        $result = $stmt->get_result();
        if (!$result) die($conn->error);
        if ($result->num_rows > 0) {
            $arr = array();
            while ($row = $result->fetch_assoc()) {
                $cartitem = new Cartitem($row['Id'],$row['cartId'],$row['SubscriptionId'],$row['AddDate'],$row['Quantity'],$row['SubscriptionStartDate'],$row['SubscriptionEndDate']);
                $arr[] = $cartitem;
            }
            return $arr;
        }
        else {
            die("The query yielded zero results.No rows found.");
        }
    }
}
